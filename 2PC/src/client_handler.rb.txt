# encoding: utf-8

#---------------------------------------------------------------#
# 						client_handler.rb
#    Class em ruby que gerencia as operações do processo Cliente
#    neste trabalho.
#    Objetivo: Melhor legibilidade do código no arquivo
#    cliente.rb
#    Autores: Evelim Carla Ribeiro
# 	 		  Lucas Affonso Xavier de Morais
#    Disciplina: Redes de computadores II
#    Bacharelado Ciência da Computação
#    Departamento de Informática
#    Universidade Federal do Paraná
#    Ano: 2015
#--------------------------------------------------------------#  

class ClientHandler
    # lê da entrada padrão o nome dos servidores e portas que ira se conectar
    def initialize(numServers)
        @log = Log.new("cliente#{Time.now.strftime('%Y%m%d%H%M%S')}.log")
        @log.report("Cliente \n",1)
        @numServers=numServers
        @hostnames = []
        @portas = []
        @socket = []
        @numServers.times do |i|
            puts "Digite o nome do servidor #{i+1}: "
            @hostnames[i]=gets.chomp	# array com nome dos servidores
            puts "Digite a porta do servidor #{i+1}: "
            @portas[i]=gets.chomp	# array com porta dos servidores
            @log.report("Inserindo o servidor #{@hostnames[i]} na porta #{@portas[i]} para poder fazer conexão.\n",0)
        end
        # hardcoded servers for test
        # @hostnames[0]="localhost"
        # @hostnames[1]="localhost"
        # @hostnames[2]="localhost"
        # @portas[0]="1234"
        # @portas[1]="2345"
        # @portas[2]="3456"
    end
    
    def log
        @log
    end
    
    # imprime o nome e a porta dos servidores que o cliente está conectado
    def printConnectedServers
        @log.report("Este cliente esta connectado aos seguintes servidores: \n",1)
        @numServers.times do |i|
            if i<@numServers-1
                @log.report("#{@hostnames[i]}:#{@portas[i]}, ",1)
            else
                @log.report("#{@hostnames[i]}:#{@portas[i]}.\n",1)
            end
        end	
    end
    
    # abre a conexão com os servidores
    def openSocket
        @numServers.times do |i|	# abre sockets
            @socket[i] = TCPSocket.open(@hostnames[i], @portas[i].to_i)
        end
    end
    
    # fecha a conexão com os servidores
    def closeSocket
        @socket.each do |s|	# fecha sockets
            s.close
        end	
    end
    
    # recebe de cada servidor uma resposta de OK se o não estiver ocupado
    # caso contrario recebe NOK
    def requestOkOrNok(resposta, i)
        if resposta == "OK"
            @okArray << i
            @log.report("#{@hostnames[i]}:#{@portas[i]} respondeu OK.\n",1)
        elsif resposta=="NOK"
            @log.report("#{@hostnames[i]}:#{@portas[i]} está ocupado.\n",1)
        else
            @log.report("Resposta recebida: '#{resposta}'.\n",1)
            @log.report("Resposta inválida.\n",1)
        end
    end
    
    # envia para os servidores uma requisição de ABORT
    def sendAbort
        @okArray.each do |i|
            @log.report("Enviando ABORT para #{@hostnames[i]}:#{@portas[i]}...\n",1)
            @socket[i].send("ABORT",0)
            @log.report("ABORT enviado para #{@hostnames[i]}:#{@portas[i]}....\n",1)
        end	
    end
    
    # enviando commit para alterar o dado do servidor 
    def sendCommit(i)
        @log.report("enviando um COMMIT para #{@hostnames[i]}:#{@portas[i]}\n",1)
        @socket[i].send("COMMIT",0)	
    end
    
    # altera nos servidores a chave que criptografa
    # com a cifra de Vigenere um arquivo
    def setKey
        @okArray=[]
        
        openSocket
        @log.report("\n",0)
            
        @numServers.times do |i|
            @log.report("Enviando requisição para #{@hostnames[i]}:#{@portas[i]}...\n",1)
            @socket[i].send("SETKEY",0)
            @log.report("Requisição SETKEY enviada. Aguardando resposta...\n",1)
            resposta = @socket[i].recv(100)
            requestOkOrNok(resposta, i)				
        end
        
        @log.report("\n",1)	
        if @okArray.size<@numServers
            sendAbort
        else
            # enviar COMMIT com a alteração pra todo mundo.
            @log.report("Digite a nova palavra-chave:\n",1)
            keyword = gets.chomp
            @log.report("A palavra chave digita é: #{keyword}\n",1)
            @numServers.times do |i|
                sendCommit(i)
                confirmacao = @socket[i].recv(100)
                @log.report("recebendo a confirmação #{confirmacao} do #{@socket[i]}\n",0)
                if confirmacao=="ACK"
                    @socket[i].send(keyword, 0)
                    @log.report("Palavra-chave '#{keyword}' enviada para o host #{@hostnames[i]}:#{@portas[i].to_i} com sucesso!\n",1)
                else
                    @log.report("Falha ao receber confirmação do servidor.\n",1)
                    @log.report("Mensagem do servidor: '#{confirmacao}'.\n",1)
                end					
            end
        end
    
        closeSocket	
    end
    
    # faz requisição da chave que criptografa o arquivo, e a mostra na tela.
    def getKey
        @okArray=[]
    
        openSocket
        @log.report("\n",0)
    
        @numServers.times do |i| # envia GETFILE
            @log.report("Enviando requisição para #{@hostnames[i]}:#{@portas[i]}...\n",1)
            @socket[i].send("GETKEY",0)
            @log.report("Requisição GETKEY enviada. Aguardando resposta...\n",1)
            resposta = @socket[i].recv(100)
            requestOkOrNok(resposta, i)
        end
    
        @log.report("\n",1)
        if @okArray.size<@numServers
            sendAbort
        else
            # enviar COMMIT com a alteração pra todo mundo.
            @log.report("\n",0)
            keyArray = []
            @numServers.times do |i|
                sendCommit(i)
                keyArray[i] = @socket[i].recv(100)
                @log.report("Palavra-chave recebida do host #{@hostnames[i]}:#{@portas[i].to_i} com sucesso!\n ",1)
            end
            if keyArray.uniq.length > 1
                @log.report("As Palavras-chaves recebidas são diferentes.\n",1)
                @log.report("\n",1)
                @numServers.times do |i|
                    @log.report("Palavra-chave recebida de #{@hostnames[i]}:#{@portas[i].to_i}:\n",1)
                    @log.report(keyArray[i],0)
                    @log.report("\n",1)
                end
            else
                @log.report("As Palavras-chaves recebidas são iguais.\n",1)
                @log.report("\n",1)
                @log.report("Palavra-chave:\n ",1)
                @log.report(keyArray.first,1)
                @log.report("\n",1)
            end
        end
        
        closeSocket	
    end
    
    # faz requisição do arquivo criptografado, e o mostra na tela.
    def getFile
        @okArray=[]
    
        openSocket
        @numServers.times do |i| # envia GETFILE
            @log.report("\n",0)
            @log.report("Enviando requisição para #{@hostnames[i]}:#{@portas[i]}...\n",1)
            @socket[i].send("GETFILE",0)
            @log.report("Requisição GETFILE enviada. Aguardando resposta...\n",1)
            resposta = @socket[i].recv(100)
            requestOkOrNok(resposta, i)
        end
    
        @log.report("\n",1)
        # puts @okArray
        # puts @numServers
        if @okArray.size<@numServers
            sendAbort
        else
            # enviar COMMIT com a alteração pra todo mundo.
            arqArray = []
            @numServers.times do |i|
                sendCommit(i)
                tamArq = @socket[i].recv(100).to_i
                @socket[i].send("ACK",0)
                arqArray[i] = @socket[i].recv(tamArq)
                @log.report("Arquivo de #{arqArray[i].size} bytes recebido do host #{@hostnames[i]}:#{@portas[i].to_i} com sucesso!\n",1)
            end
            if arqArray.uniq.length > 1
                puts "Arquivos recebidos são diferentes."
                @log.report("\n",1)
                @numServers.times do |i|
                    @log.report("Arquivo recebido de #{@hostnames[i]}:#{@portas[i].to_i}:\n",1)
                    @log.report("#{arqArray[i]}\n",1)
                    @log.report("\n",1)
                end
            else
                @log.report("Arquivos recebidos são iguais.\n",1)
                @log.report("\n",1)
                @log.report("Arquivo recebido:\n",1)
                @log.report("#{arqArray.first}\n",1)
                @log.report("\n",1)
            end
        end
        
        closeSocket
    end
end